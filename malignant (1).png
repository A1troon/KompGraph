{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMsoAaZ/YS/yD8QMbS+P3IM",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/A1troon/KompGraph/blob/main/malignant%20(1).png\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lsCfvHfyoQ5b"
      },
      "outputs": [],
      "source": [
        "import cv2\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "img_path =\"malignant (1).png\"\n",
        "img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)\n",
        "print(\"Размер изображения:\", img.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VyynlL6YtiVQ",
        "outputId": "44154d3a-b482-4b7c-b2ac-8581056c3f47"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Размер изображения: (598, 449)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Задание 1.\n",
        "Дано квадратное цифрового изображение I со стороной M в оттенках\n",
        "серого. Значение интенсивности изменяется от 0 до 255. Какой объем\n",
        "памяти необходим для хранения несжатого изображения со стороной\n",
        "256, 512, 1024, 2048, 4096, 8192, 16384? Постройте график объема\n",
        "памяти и стороны изображения. Аналогичный расчет проведите для\n",
        "фильма продолжительностью 2 часа 25 минут."
      ],
      "metadata": {
        "id": "U1sibcVarGUX"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "L = 256, k = log2L = 8, b = n * n * k  \n",
        "n=256, b256 = 256 * 256 * 8 =  524,288 бит = 64 кб  \n",
        "n = 512, b512 = 4 * b256 = 256 кб  \n",
        "n = 1024, b1024 = 4 * b512 = 1 мб  \n",
        "n = 2048, b2048 = 4 мб  \n",
        "n = 4096, b4096 = 16 мб  \n",
        "n = 8192, b8192 = 64 мб  \n",
        "n = 16384, b16384 = 256 мб  \n",
        "Если частота 30 кадров в секунду то  \n",
        "n=256, 30 * (256*256) * 8 * (60 *145) = 15,93 гб  \n",
        "n = 512, 63,72 Гб  \n",
        "n = 1024, 254,88 Гб  \n",
        "n = 2048, 1019.52 гб ≈ 1 тб  \n",
        "n = 4096, 4тб  \n",
        "n = 8192, 16тб  \n",
        "n = 16384, 64тб  "
      ],
      "metadata": {
        "id": "c9RMc0vP2zXe"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Задание 2.Считайте изображение malignant (1).png. Закрасьте черный\n",
        "цветом пиксели, которые находятся в центре изображения на расстоянии\n",
        "не менее чем 100 пикселей от каждого края изображения. Результат\n",
        "сохраните в файл"
      ],
      "metadata": {
        "id": "y_547oSQrOHL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "img_path =\"malignant (1).png\"\n",
        "img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)\n",
        "for i in range(100,img.shape[1] - 100):\n",
        "    for j in range(100,img.shape[0] - 100):\n",
        "        img[j][i] = 0\n",
        "print(img)\n",
        "out_path = \"./2_img.png\"\n",
        "cv2.imwrite(out_path, img)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cgrpd90trshW",
        "outputId": "0a200625-756c-4c36-b08a-ba0cd232e77c"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[  0   4   0 ...   3   1   0]\n",
            " [  2   3   0 ... 236 235 230]\n",
            " [  0   0   4 ... 228 227 217]\n",
            " ...\n",
            " [ 81  84  87 ...  57  58  62]\n",
            " [ 77  82  88 ...  60  60  64]\n",
            " [ 68  74  82 ...  59  61  60]]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Задание 3.Считайте изображение malignant (1).png. Закрасьте черным\n",
        "цветом пиксели, которые находятся не дальше 50 пикселей от\n",
        "ближайшего края изображения. Закрасьте белым цветом пиксели,\n",
        "которые находятся не ближе 50 пикселей и не дальше 100 пикселей от\n",
        "ближайшего края изображения. Результат сохраните в файл."
      ],
      "metadata": {
        "id": "eDm-HkWcrSeA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "img_path =\"malignant (1).png\"\n",
        "img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)\n",
        "img[50:100] = 255\n",
        "img[-100:-50] = 255\n",
        "img[:,-100:-50] = 255\n",
        "img[:,50:100] = 255\n",
        "\n",
        "img[0:50] = 0\n",
        "img[-50:] = 0\n",
        "img[:,0:50] = 0\n",
        "img[:,-50:] = 0\n",
        "out_path = \"./3_img.png\"\n",
        "cv2.imwrite(out_path, img)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VY-ryM7UsHJq",
        "outputId": "a42eeb22-1aeb-47d9-988b-af0c26b7b760"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Задание 4.Создайте массив A и B размером 6x8. Всем элементам массива A\n",
        "присвойте значение 2, а элементам массива В значение 3. Результат\n",
        "поэлементного умножения массивов А и B сохраните в массив C.\n",
        "Результат выведите на экран. Аналогичную процедуру повторите для\n",
        "поэлементной операции вычитания и умножения."
      ],
      "metadata": {
        "id": "dF2F0LC5rVRg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "A = np.array([[2] * 6 for i in range(8)])\n",
        "B = np.array([[3] * 6 for i in range(8)])\n",
        "C = A * B\n",
        "print(C)\n",
        "C = A - B\n",
        "print(C)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QDEr8gtFxRi5",
        "outputId": "60ab035e-2f89-4b16-b4ef-e71054064b94"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[6 6 6 6 6 6]\n",
            " [6 6 6 6 6 6]\n",
            " [6 6 6 6 6 6]\n",
            " [6 6 6 6 6 6]\n",
            " [6 6 6 6 6 6]\n",
            " [6 6 6 6 6 6]\n",
            " [6 6 6 6 6 6]\n",
            " [6 6 6 6 6 6]]\n",
            "[[-1 -1 -1 -1 -1 -1]\n",
            " [-1 -1 -1 -1 -1 -1]\n",
            " [-1 -1 -1 -1 -1 -1]\n",
            " [-1 -1 -1 -1 -1 -1]\n",
            " [-1 -1 -1 -1 -1 -1]\n",
            " [-1 -1 -1 -1 -1 -1]\n",
            " [-1 -1 -1 -1 -1 -1]\n",
            " [-1 -1 -1 -1 -1 -1]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Задание 5. Матрица A размером 2x2 в первой строке содержит значения 3, 1, а в второй строке 1, 0. Матрица B размером 2x2 в первой строке содержит значения 2, 2, а в второй строке 1, 2. Реализуйте алгоритм матричного умножения. Результат сохраните в массив C и отобразите на экране. Проверьте себя при помощи функции матричного умножения\n",
        "np.matmul(a, b) из библиотеки NumPy\n"
      ],
      "metadata": {
        "id": "w36siCE7rYS4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "A = np.array([[3,1], [1,0]])\n",
        "B = np.array([[2,2], [1,2]])\n",
        "C = [\n",
        "    [\n",
        "        A[0][0] * B[0][0] + A[0][1] * B[1][0],\n",
        "        A[0][0] * B[0][1] + A[0][1] * B[1][1]\n",
        "    ],\n",
        "    [\n",
        "        A[1][0] * B[0][0] + A[1][1] * B[1][0],\n",
        "        A[1][0] * B[0][1] + A[1][1] * B[1][1]\n",
        "    ]\n",
        "  ]\n",
        "print(C)\n",
        "print(np.matmul(A,B))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YHITZwfPrNQQ",
        "outputId": "b06e9106-1857-4951-b96b-cfdf282914b1"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[7, 8], [2, 2]]\n",
            "[[7 8]\n",
            " [2 2]]\n"
          ]
        }
      ]
    }
  ]
}